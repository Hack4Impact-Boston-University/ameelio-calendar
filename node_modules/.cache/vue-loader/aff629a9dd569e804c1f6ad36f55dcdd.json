{"remainingRequest":"/Users/shreyabanga/Desktop/H4I-Ameelio/ameelio-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shreyabanga/Desktop/H4I-Ameelio/ameelio-calendar/src/components/Calendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shreyabanga/Desktop/H4I-Ameelio/ameelio-calendar/src/components/Calendar.vue","mtime":1572714202817},{"path":"/Users/shreyabanga/Desktop/H4I-Ameelio/ameelio-calendar/node_modules/vuetify-loader/lib/loader.js","mtime":1571961647910},{"path":"/Users/shreyabanga/Desktop/H4I-Ameelio/ameelio-calendar/node_modules/cache-loader/dist/cjs.js","mtime":1571961639673},{"path":"/Users/shreyabanga/Desktop/H4I-Ameelio/ameelio-calendar/node_modules/vue-loader/lib/index.js","mtime":1571961647768}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { db } from '@/main'\nexport default {\n  data: () => ({\n    today: new Date().toISOString().substr(0, 10),\n    focus: new Date().toISOString().substr(0, 10),\n    type: 'month',\n    typeToLabel: {\n      month: 'Month',\n      week: 'Week',\n      day: 'Day',\n      '4day': '4 Days',\n    },\n    name: null,\n    details: null,\n    start: null,\n    // start: null,\n    startTime:null,\n    endTime:null,\n    //end: null,\n    color: '#1976D2', // default event color\n    currentlyEditing: null,\n    selectedEvent: {},\n    selectedElement: null,\n    selectedOpen: false,\n    events: [],\n    dialog: false,\n  }),\n  mounted () {\n    this.getEvents()\n  },\n  computed: {\n    title () {\n      const { start, end } = this\n      if (!start || !end) {\n        return ''\n      }\n      const startMonth = this.monthFormatter(start)\n      const endMonth = this.monthFormatter(end)\n      const suffixMonth = startMonth === endMonth ? '' : endMonth\n      const startYear = start.year\n      const endYear = end.year\n      const suffixYear = startYear === endYear ? '' : endYear\n      const startDay = start.day + this.nth(start.day)\n      const endDay = end.day + this.nth(end.day)\n      switch (this.type) {\n        case 'month':\n        return `${startMonth} ${startYear}`\n        case 'week':\n        case '4day':\n        return `${startMonth} ${startDay} ${startYear} - ${suffixMonth} ${endDay} ${suffixYear}`\n        case 'day':\n        return `${startMonth} ${startDay} ${startYear}`\n      }\n      return ''\n    },\n    monthFormatter () {\n      return this.$refs.calendar.getFormatter({\n        timeZone: 'UTC', month: 'long',\n      })\n    }\n  },\n  methods: {\n    async getEvents () {\n      let snapshot = await db.collection('calEvent').get()\n      let events = []\n      snapshot.forEach(doc => {\n        let appData = doc.data()\n        console.log(appData)\n        appData.id = doc.id\n        events.push(appData)\n      })\n      this.events = events\n    },\n    viewDay ({ date }) {\n      this.focus = date\n      this.type = 'day'\n    },\n    getEventColor (event) {\n      return event.color\n    },\n    setToday () {\n      this.focus = this.today\n    },\n    prev () {\n      this.$refs.calendar.prev()\n    },\n    next () {\n      this.$refs.calendar.next()\n    },\n    checkAvailibility(date,start,end) {\n  \n      var av = 1\n      this.events.forEach(ev => {\n       if(ev.start == date) {\n         if((ev.startTime >= start && ev.startTime <= end) || (ev.endTime >= start && ev.startTime <= end)) {\n           av=0\n         }\n       }\n\n      })\n      return av\n    },\n    async addEvent () {\n\n      let availibility = this.checkAvailibility(this.start,this.startTime, this.endTime)\n      console.log(availibility)\n      if (availibility == 1) {\n        if (this.name && this.start && this.startTime <= \"16:00\" && this.endTime <= \"17:00\") {\n          await db.collection(\"calEvent\").add({\n            name: this.name,\n            details: this.details,\n            start: this.start,\n            startTime:this.startTime,\n            endTime: this.endTime,\n            //start: this.start,\n            //end: this.end,\n            color: this.color\n          })\n          this.getEvents()\n          this.name = '',\n          this.details = '',\n          this.start = '',\n          //this.start = '',\n          this.startTime = '',\n          this.endTime = '',\n          //this.end = '',\n          this.color = ''\n        } \n      \n        else if(this.name && this.start && this.startTime > \"16:00\" && this.endTime > \"17:00\") {\n          this.getEvents()\n          alert('Apointments after 4 pm are not allowed. ')\n        }\n\n        else {\n          this.getEvents()\n          alert('You must enter event name, start, and end time')\n        }\n\n      }\n      else\n      {\n        this.getEvents()\n        \n          this.start = '',\n          //this.start = '',\n          this.startTime = '',\n          this.endTime = '',\n          //this.end = '',\n          \n        alert('This time slot is not available.')\n        \n      }\n      \n    },\n    editEvent (ev) {\n      this.currentlyEditing = ev.id\n    },\n    async updateEvent (ev) {\n      await db.collection('calEvent').doc(this.currentlyEditing).update({\n        details: ev.details\n      })\n      this.selectedOpen = false,\n      this.currentlyEditing = null\n    },\n    async deleteEvent (ev) {\n      await db.collection(\"calEvent\").doc(ev).delete()\n      this.selectedOpen = false,\n      this.getEvents()\n    },\n    showEvent ({ nativeEvent, event }) {\n      const open = () => {\n        this.selectedEvent = event\n        this.selectedElement = nativeEvent.target\n        setTimeout(() => this.selectedOpen = true, 10)\n      }\n      if (this.selectedOpen) {\n        this.selectedOpen = false\n        setTimeout(open, 10)\n      } else {\n        open()\n      }\n      nativeEvent.stopPropagation()\n    },\n    updateRange ({ start, end }) {\n      this.start = start\n      this.end = end\n    },\n    nth (d) {\n      return d > 3 && d < 21\n      ? 'th'\n      : ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'][d % 10]\n    }\n  }\n}\n",{"version":3,"sources":["Calendar.vue"],"names":[],"mappingsfile":"Calendar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-row class=\"fill-height\">\n    <v-col>\n      <v-sheet height=\"64\">\n        <v-toolbar flat color=\"white\">\n          <v-btn color=\"primary\" dark @click.stop=\"dialog = true\">\n            New Event\n          </v-btn>\n          <v-btn outlined class=\"mr-4\" @click=\"setToday\">\n            Today\n          </v-btn>\n          <v-btn fab text small @click=\"prev\">\n            <v-icon small>mdi-chevron-left</v-icon>\n          </v-btn>\n          <v-btn fab text small @click=\"next\">\n            <v-icon small>mdi-chevron-right</v-icon>\n          </v-btn>\n          <v-toolbar-title>{{ title }}</v-toolbar-title>\n          <div class=\"flex-grow-1\"></div>\n          <v-menu bottom right>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn outlined v-on=\"on\">\n                <span>{{ typeToLabel[type] }}</span>\n                <v-icon right>mdi-menu-down</v-icon>\n              </v-btn>\n            </template>\n            <v-list>\n              <v-list-item @click=\"type = 'day'\">\n                <v-list-item-title>Day</v-list-item-title>\n              </v-list-item>\n              <v-list-item @click=\"type = 'week'\">\n                <v-list-item-title>Week</v-list-item-title>\n              </v-list-item>\n              <v-list-item @click=\"type = 'month'\">\n                <v-list-item-title>Month</v-list-item-title>\n              </v-list-item>\n              <v-list-item @click=\"type = '4day'\">\n                <v-list-item-title>4 days</v-list-item-title>\n              </v-list-item>\n            </v-list>\n          </v-menu>\n        </v-toolbar>\n      </v-sheet>\n\n      <v-dialog v-model=\"dialog\" max-width=\"500\">\n        <v-card>\n          <v-container>\n            <v-form @submit.prevent=\"addEvent\">\n              <v-text-field v-model=\"name\" type=\"text\" label=\"Event Name (required)\"></v-text-field>\n              <v-text-field v-model=\"details\" type=\"text\" label=\"Details\"></v-text-field>\n              <v-text-field v-model=\"start\" type=\"date\" label=\"Start Date (required)\"></v-text-field>\n              <v-text-field v-model=\"startTime\" type=\"time\" label=\"Start Time (required)\"></v-text-field>\n              <v-text-field v-model=\"endTime\" type=\"time\" label=\"End Time (required)\"></v-text-field>\n              <v-text-field v-model=\"color\" type=\"color\" label=\"Color (click to open color menu)\"></v-text-field>\n              <v-btn type=\"submit\" color=\"primary\" class=\"mr-4\" @click.stop=\"dialog = false\">\n                create event\n              </v-btn>\n            </v-form>\n          </v-container>\n        </v-card>\n      </v-dialog>\n\n<v-sheet height=\"600\">\n  <v-calendar\n  ref=\"calendar\"\n  v-model=\"focus\"\n  color=\"primary\"\n  :events=\"events\"\n  :event-color=\"getEventColor\"\n  :event-margin-bottom=\"3\"\n  :now=\"today\"\n  :type=\"type\"\n  @click:event=\"showEvent\"\n  @click:more=\"viewDay\"\n  @click:date=\"viewDay\"\n  @change=\"updateRange\"\n  ></v-calendar>\n  <v-menu\n  v-model=\"selectedOpen\"\n  :close-on-content-click=\"false\"\n  :activator=\"selectedElement\"\n  full-width\n  offset-x\n  >\n  <v-card color=\"grey lighten-4\" :width=\"350\" flat>\n    <v-toolbar :color=\"selectedEvent.color\" dark>\n      <v-btn @click=\"deleteEvent(selectedEvent.id)\" icon>\n        <v-icon>mdi-delete</v-icon>\n      </v-btn>\n      <v-toolbar-title v-html=\"selectedEvent.name\"></v-toolbar-title>\n      <div class=\"flex-grow-1\"></div>\n    </v-toolbar>\n\n    <v-card-text>\n      <form v-if=\"currentlyEditing !== selectedEvent.id\">\n        {{ selectedEvent.details }}\n      </form>\n      <form v-else>\n        <textarea-autosize\n        v-model=\"selectedEvent.details\"\n        type=\"text\"\n        style=\"width: 100%\"\n        :min-height=\"100\"\n        placeholder=\"add note\">\n      </textarea-autosize>\n    </form>\n  </v-card-text>\n\n  <v-card-actions>\n    <v-btn text color=\"secondary\" @click=\"selectedOpen = false\">\n      close\n    </v-btn>\n    <v-btn v-if=\"currentlyEditing !== selectedEvent.id\" text @click.prevent=\"editEvent(selectedEvent)\">\n      edit\n    </v-btn>\n    <v-btn text v-else type=\"submit\" @click.prevent=\"updateEvent(selectedEvent)\">\n      Save\n    </v-btn>\n  </v-card-actions>\n</v-card>\n</v-menu>\n</v-sheet>\n</v-col>\n</v-row>\n</template>\n\n<script>\nimport { db } from '@/main'\nexport default {\n  data: () => ({\n    today: new Date().toISOString().substr(0, 10),\n    focus: new Date().toISOString().substr(0, 10),\n    type: 'month',\n    typeToLabel: {\n      month: 'Month',\n      week: 'Week',\n      day: 'Day',\n      '4day': '4 Days',\n    },\n    name: null,\n    details: null,\n    start: null,\n    // start: null,\n    startTime:null,\n    endTime:null,\n    //end: null,\n    color: '#1976D2', // default event color\n    currentlyEditing: null,\n    selectedEvent: {},\n    selectedElement: null,\n    selectedOpen: false,\n    events: [],\n    dialog: false,\n  }),\n  mounted () {\n    this.getEvents()\n  },\n  computed: {\n    title () {\n      const { start, end } = this\n      if (!start || !end) {\n        return ''\n      }\n      const startMonth = this.monthFormatter(start)\n      const endMonth = this.monthFormatter(end)\n      const suffixMonth = startMonth === endMonth ? '' : endMonth\n      const startYear = start.year\n      const endYear = end.year\n      const suffixYear = startYear === endYear ? '' : endYear\n      const startDay = start.day + this.nth(start.day)\n      const endDay = end.day + this.nth(end.day)\n      switch (this.type) {\n        case 'month':\n        return `${startMonth} ${startYear}`\n        case 'week':\n        case '4day':\n        return `${startMonth} ${startDay} ${startYear} - ${suffixMonth} ${endDay} ${suffixYear}`\n        case 'day':\n        return `${startMonth} ${startDay} ${startYear}`\n      }\n      return ''\n    },\n    monthFormatter () {\n      return this.$refs.calendar.getFormatter({\n        timeZone: 'UTC', month: 'long',\n      })\n    }\n  },\n  methods: {\n    async getEvents () {\n      let snapshot = await db.collection('calEvent').get()\n      let events = []\n      snapshot.forEach(doc => {\n        let appData = doc.data()\n        console.log(appData)\n        appData.id = doc.id\n        events.push(appData)\n      })\n      this.events = events\n    },\n    viewDay ({ date }) {\n      this.focus = date\n      this.type = 'day'\n    },\n    getEventColor (event) {\n      return event.color\n    },\n    setToday () {\n      this.focus = this.today\n    },\n    prev () {\n      this.$refs.calendar.prev()\n    },\n    next () {\n      this.$refs.calendar.next()\n    },\n    checkAvailibility(date,start,end) {\n  \n      var av = 1\n      this.events.forEach(ev => {\n       if(ev.start == date) {\n         if((ev.startTime >= start && ev.startTime <= end) || (ev.endTime >= start && ev.startTime <= end)) {\n           av=0\n         }\n       }\n\n      })\n      return av\n    },\n    async addEvent () {\n\n      let availibility = this.checkAvailibility(this.start,this.startTime, this.endTime)\n      console.log(availibility)\n      if (availibility == 1) {\n        if (this.name && this.start && this.startTime <= \"16:00\" && this.endTime <= \"17:00\") {\n          await db.collection(\"calEvent\").add({\n            name: this.name,\n            details: this.details,\n            start: this.start,\n            startTime:this.startTime,\n            endTime: this.endTime,\n            //start: this.start,\n            //end: this.end,\n            color: this.color\n          })\n          this.getEvents()\n          this.name = '',\n          this.details = '',\n          this.start = '',\n          //this.start = '',\n          this.startTime = '',\n          this.endTime = '',\n          //this.end = '',\n          this.color = ''\n        } \n      \n        else if(this.name && this.start && this.startTime > \"16:00\" && this.endTime > \"17:00\") {\n          this.getEvents()\n          alert('Apointments after 4 pm are not allowed. ')\n        }\n\n        else {\n          this.getEvents()\n          alert('You must enter event name, start, and end time')\n        }\n\n      }\n      else\n      {\n        this.getEvents()\n        \n          this.start = '',\n          //this.start = '',\n          this.startTime = '',\n          this.endTime = '',\n          //this.end = '',\n          \n        alert('This time slot is not available.')\n        \n      }\n      \n    },\n    editEvent (ev) {\n      this.currentlyEditing = ev.id\n    },\n    async updateEvent (ev) {\n      await db.collection('calEvent').doc(this.currentlyEditing).update({\n        details: ev.details\n      })\n      this.selectedOpen = false,\n      this.currentlyEditing = null\n    },\n    async deleteEvent (ev) {\n      await db.collection(\"calEvent\").doc(ev).delete()\n      this.selectedOpen = false,\n      this.getEvents()\n    },\n    showEvent ({ nativeEvent, event }) {\n      const open = () => {\n        this.selectedEvent = event\n        this.selectedElement = nativeEvent.target\n        setTimeout(() => this.selectedOpen = true, 10)\n      }\n      if (this.selectedOpen) {\n        this.selectedOpen = false\n        setTimeout(open, 10)\n      } else {\n        open()\n      }\n      nativeEvent.stopPropagation()\n    },\n    updateRange ({ start, end }) {\n      this.start = start\n      this.end = end\n    },\n    nth (d) {\n      return d > 3 && d < 21\n      ? 'th'\n      : ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'][d % 10]\n    }\n  }\n}\n</script>\n"]}]}